# -*- coding: utf-8 -*-
"""fashionMNIST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JDsYYTZe9GI-9vt9iwA6KYwaeHgYai5I
"""

import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt
# Load the Fashion-MNIST dataset
(X_train, y_train), (X_test, y_test) = keras.datasets.fashion_mnist.load_data()
# Normalize the data
X_train = X_train.astype("float32") / 255.0
X_test = X_test.astype("float32") / 255.0
# Convert labels to one-hot encoding
y_train = keras.utils.to_categorical(y_train, 10)
y_test = keras.utils.to_categorical(y_test, 10)
# Define shallow Convolutional Neural Network model
model = keras.models.Sequential([
    keras.layers.InputLayer(input_shape=(28, 28, 1)),
    keras.layers.Conv2D(32, (3, 3), activation=None, padding='same'),
    keras.layers.BatchNormalization(),
    keras.layers.Activation('relu'),
    keras.layers.MaxPooling2D(pool_size=(2, 2)),
    keras.layers.Conv2D(64, (3, 3), activation=None, padding='same'),
    keras.layers.BatchNormalization(),
    keras.layers.Activation('relu'),
    keras.layers.MaxPooling2D(pool_size=(2, 2)),
    keras.layers.Flatten(),
    keras.layers.Dense(1280, activation='relu'),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(10, activation='softmax')
])
optimizer = keras.optimizers.SGD(learning_rate=0.2, momentum=0.9)
model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])
# Train the model
SCNNB = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=150, batch_size=128, verbose=1)
# Evaluate the model on the test data and print accuracy
test_loss, test_acc = model.evaluate(X_test, y_test, verbose=2)
print("Test accuracy:", test_acc*100)

plt.plot(SCNNB.history["val_accuracy"])
plt.ylabel("Test Accuracy")
plt.xlabel("Epoch")
plt.legend(["SCNNB"], loc="lower right")
plt.show()

plt.plot(SCNNB.history["accuracy"])
plt.ylabel("Train Accuracy")
plt.xlabel("Epoch")
plt.legend(["SCNNB"], loc="lower right")
plt.show()

# SCNNB-a
model = keras.models.Sequential([
    keras.layers.InputLayer(input_shape=(28, 28, 1)),
    keras.layers.Conv2D(32, (3, 3), activation=None, padding='same'),
    keras.layers.MaxPooling2D(pool_size=(2, 2)),
    keras.layers.Conv2D(64, (3, 3), activation=None, padding='same'),
    keras.layers.BatchNormalization(),
    keras.layers.Activation('relu'),
    keras.layers.MaxPooling2D(pool_size=(2, 2)),
    keras.layers.Flatten(),
    keras.layers.Dense(1280, activation='relu'),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(10, activation='softmax')
])
# Compile the model
optimizer = keras.optimizers.SGD(learning_rate=0.2, momentum=0.9)
model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])
# Train the model
SCNNBa = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=150, batch_size=128, verbose=1)
# Evaluate the model on the test data and print accuracy
test_loss, test_acc = model.evaluate(X_test, y_test, verbose=2)
print("Test accuracy:", test_acc)

plt.plot(SCNNBa.history["val_accuracy"])
plt.ylabel("Test Accuracy")
plt.xlabel("Epoch")
plt.legend(["SCNNB-a"], loc="lower right")
plt.show()

plt.plot(SCNNBa.history["accuracy"])
plt.ylabel("Train Accuracy")
plt.xlabel("Epoch")
plt.legend(["SCNNB-a"], loc="lower right")
plt.show()

# SCNNB-b
model = keras.models.Sequential([
    keras.layers.InputLayer(input_shape=(28, 28, 1)),
    keras.layers.Conv2D(32, (3, 3), activation=None, padding='same'),
    keras.layers.MaxPooling2D(pool_size=(2, 2)),
    keras.layers.Conv2D(64, (3, 3), activation=None, padding='same'),
    keras.layers.MaxPooling2D(pool_size=(2, 2)),
    keras.layers.Flatten(),
    keras.layers.Dense(1280, activation='relu'),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(10, activation='softmax')
])
# Compile the model
optimizer = keras.optimizers.SGD(learning_rate=0.2, momentum=0.9)
model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])
# Train the model
SCNNBb = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=150, batch_size=128, verbose=1)
# Evaluate the model on the test data and print accuracy
test_loss, test_acc = model.evaluate(X_test, y_test, verbose=2)
print("Test accuracy:", test_acc)

plt.plot(SCNNBb.history["val_accuracy"])
plt.ylabel("Test Accuracy")
plt.xlabel("Epoch")
plt.legend(["SCNNB", "SCNNB-a", "SCNNB-b"], loc="lower right")
plt.show()

plt.plot(SCNNBb.history["accuracy"])
plt.ylabel("Train Accuracy")
plt.xlabel("Epoch")
plt.legend(["SCNNB-b"], loc="lower right")
plt.show()

plt.plot(SCNNB.history["val_accuracy"])
plt.plot(SCNNBa.history["val_accuracy"])
plt.ylabel("Test Accuracy")
plt.xlabel("Epoch")
plt.legend(["SCNNB", "SCNNB-a"], loc="lower right")
plt.show()

plt.plot(SCNNB.history["accuracy"])
plt.plot(SCNNBa.history["accuracy"])
plt.ylabel("Train Accuracy")
plt.xlabel("Epoch")
plt.legend(["SCNNB", "SCNNB-a"], loc="lower right")
plt.show()

# Plot the test accuracy over epochs
plt.plot(SCNNB.SCNNB["val_accuracy"])
plt.plot(SCNNBa.SCNNBa["val_accuracy"])
plt.plot(SCNNBb.SCNNBb["val_accuracy"])
plt.ylabel("Test Accuracy")
plt.xlabel("Epoch")
plt.legend(["SCNNB", "SCNNB-a", "SCNNB-b"], loc="lower right")
plt.show()